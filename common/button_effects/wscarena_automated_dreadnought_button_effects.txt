@automated_dreadnought_effect_1_cooldown = 360
@automated_dreadnought_effect_1_duration = 180
@automated_dreadnought_effect_2_cooldown = 180
@automated_dreadnought_effect_2_duration = 90
@automated_dreadnought_effect_3_cooldown = 360
@automated_dreadnought_effect_3_duration = 90

@level_1_max_distance = 30
@level_2_max_distance = 60
@level_3_max_distance = 100
@effect_level_2 = 4
@effect_level_3 = 7

automated_dreadnought_effect_1 = {				# Dark Matter Sensors
	potential = {
		exists = from
		from = {
			any_owned_ship = {
				is_ship_size = npc_warship_01
			}
		}
	}
	allow = {
		custom_tooltip = automated_dreadnought_effect_1_tooltip
		custom_tooltip = {
				fail_text = requires_not_on_cooldown
				NOT = {
					has_country_flag = automated_dreadnought_effect_1_cooldown
				}
			}
	}
	
	effect = {
		custom_tooltip = automated_dreadnought_effect_1_tooltip
		#hidden_effect = {
			set_timed_country_flag = { flag = automated_dreadnought_effect_1_cooldown days = @automated_dreadnought_effect_1_cooldown }
			random_owned_ship = {
				limit = {
					is_ship_size = npc_warship_01
				}
				if = {
					limit = {
						fleet = {
							owner = {
								check_variable = {
									which = level
									value < @effect_level_2
								}
							}
						}
					}
					add_modifier = {
						modifier = dark_matter_sensors_1
						days = @automated_dreadnought_effect_1_duration
					}
					solar_system = {
						every_system_planet = {
							limit = {
								is_surveyed = {
									who = root
									status = no
								}
							}
							surveyed = {
								set_surveyed = yes
								surveyor = root
							}
							create_ambient_object = {
								type = positive_effect_test
								location = this
								duration = 5
								
								use_3d_location = yes
								
								entity_offset = { min = 0 max = 0 }
								entity_offset_angle = { min = 0 max = 0 }
								entity_offset_height = { min = 3 max = 3 }
								
								entity_scale_to_size = yes
								#scale = 0.3
							}
						}
					}
				}
				else_if = {
					limit = {
						fleet = {
							owner = {
								check_variable = {
									which = level
									value >= @effect_level_2
								}
								check_variable = {
									which = level
									value < @effect_level_3
								}
							}
						}
					}
					add_modifier = {
						modifier = dark_matter_sensors_2
						days = @automated_dreadnought_effect_1_duration
					}
					solar_system = {
						every_system_planet = {
							limit = {
								is_surveyed = {
									who = root
									status = no
								}
							}
							surveyed = {
								set_surveyed = yes
								surveyor = root
							}
							create_ambient_object = {
								type = positive_effect_test
								location = this
								duration = 5
								
								use_3d_location = yes
								
								entity_offset = { min = 0 max = 0 }
								entity_offset_angle = { min = 0 max = 0 }
								entity_offset_height = { min = 3 max = 3 }
								
								entity_scale_to_size = yes
								#scale = 0.3
							}
						}
					}
				}
				else = {
					add_modifier = {
						modifier = dark_matter_sensors_3
						days = @automated_dreadnought_effect_1_duration
					}
					solar_system = {
						every_system_planet = {
							limit = {
								is_surveyed = {
									who = root
									status = no
								}
							}
							surveyed = {
								set_surveyed = yes
								surveyor = root
							}
							create_ambient_object = {
								type = positive_effect_test
								location = this
								duration = 5
								
								use_3d_location = yes
								
								entity_offset = { min = 0 max = 0 }
								entity_offset_angle = { min = 0 max = 0 }
								entity_offset_height = { min = 3 max = 3 }
								
								entity_scale_to_size = yes
								#scale = 0.3
							}
						}
					}
				}
			}
		}
	#}
}


automated_dreadnought_effect_2 = {			# Ancient Fire Control
	
	potential = {
		
		exists = from
		from = {
			any_owned_ship = {
				is_ship_size = npc_warship_01
			}
		}
	}
	allow = {
			custom_tooltip = automated_dreadnought_effect_2_tooltip
			custom_tooltip = {
				fail_text = requires_not_on_cooldown
				NOT = {
					has_country_flag = automated_dreadnought_effect_2_cooldown
				}
			}
			custom_tooltip = {
				fail_text = requires_level_3
				check_variable = {
					which = level
					value >= 3
				}
			}
		
	}
	effect = {
		custom_tooltip = automated_dreadnought_effect_2_tooltip
		#hidden_effect = {
			set_timed_country_flag = { flag = automated_dreadnought_effect_2_cooldown days = @automated_dreadnought_effect_2_cooldown }
			random_owned_ship = {
				limit = {
					is_ship_size = npc_warship_01
				}
				solar_system = {
					every_fleet_in_system = {
						limit = {
							any_owned_ship = {
								OR = {
									is_ship_class = shipclass_military
									is_ship_class = shipclass_starbase
									has_ship_flag = hero_unit
								}
							}
							owner = {
								OR = {
									is_same_value = root
									is_in_federation_with = root
								}
							}
						}
						if = {
							limit = {
								prevprevprev.fleet.owner = {
									check_variable = {
										which = level
										value < @effect_level_2
									}
								}
							}
							while = {
								limit = {
									any_owned_ship = {
										NOT = {
											has_modifier = ancient_fire_control_1
										}
										OR = {
											is_ship_class = shipclass_military
											is_ship_class = shipclass_starbase
											has_ship_flag = hero_unit
										}
									}
								}
								random_owned_ship = {
									limit = {
										NOT = {
											has_modifier = ancient_fire_control_1
										}
										OR = {
											is_ship_class = shipclass_military
											is_ship_class = shipclass_starbase
											has_ship_flag = hero_unit
										}
									}
								
								add_modifier = {
									modifier = ancient_fire_control_1
									days = @automated_dreadnought_effect_2_duration
									}
								}
							}
						}
						else_if = {
							limit = {
								prevprevprev.fleet.owner = {
									check_variable = {
										which = level
										value >= @effect_level_2
									}
									check_variable = {
										which = level
										value < @effect_level_3
									}
								}
							}
							while = {
								limit = {
									any_owned_ship = {
										NOT = {
											has_modifier = ancient_fire_control_2
										}
										OR = {
											is_ship_class = shipclass_military
											is_ship_class = shipclass_starbase
											has_ship_flag = hero_unit
										}
									}
								}
								random_owned_ship = {
									limit = {
										NOT = {
											has_modifier = ancient_fire_control_2
										}
										OR = {
											is_ship_class = shipclass_military
											is_ship_class = shipclass_starbase
											has_ship_flag = hero_unit
										}
									}
								
								add_modifier = {
									modifier = ancient_fire_control_2
									days = @automated_dreadnought_effect_2_duration
									}
								}
							}
						}
						else = {
								while = {
									limit = {
										any_owned_ship = {
											NOT = {
												has_modifier = ancient_fire_control_3
											}
											OR = {
												is_ship_class = shipclass_military
												is_ship_class = shipclass_starbase
												has_ship_flag = hero_unit
											}
										}
									}
									random_owned_ship = {
										limit = {
											NOT = {
												has_modifier = ancient_fire_control_3
											}
											OR = {
												is_ship_class = shipclass_military
												is_ship_class = shipclass_starbase
												has_ship_flag = hero_unit
											}
										}
									
									add_modifier = {
										modifier = ancient_fire_control_3
										days = @automated_dreadnought_effect_2_duration
										}
									}
								}
							}							
						}
					}
				}
			#}
		}
	}

	
automated_dreadnought_effect_3 = {				# Beacon of the Architects
	potential = {
		exists = from
		from = {
			any_owned_ship = {
				is_ship_size = npc_warship_01
			}
		}
	}
	allow = {
			custom_tooltip = automated_dreadnought_effect_3_tooltip
			custom_tooltip = {
				fail_text = requires_not_on_cooldown
				NOT = {
					has_country_flag = automated_dreadnought_effect_3_cooldown
				}
			}
			custom_tooltip = {
				fail_text = requires_level_5
				check_variable = {
					which = level
					value >= 5
				}
			}
		}
	effect = {
		custom_tooltip = automated_dreadnought_effect_3_tooltip
		#hidden_effect = {
			set_timed_country_flag = { flag = automated_dreadnought_effect_3_cooldown days = @automated_dreadnought_effect_3_cooldown }
			random_owned_ship = {
				limit = {
					is_ship_size = npc_warship_01
				}
				solar_system = {
					every_fleet_in_system = {
						limit = {
							any_owned_ship = {
								OR = {
									is_ship_class = shipclass_military
									#is_ship_class = shipclass_starbase
									has_ship_flag = hero_unit
								}
							}
							owner = {
								OR = {
									is_hostile = root
									is_at_war_with = root
								}
							}
							distance = {
								min_distance > 0
								max_distance < @level_3_max_distance
								source = prevprev.fleet
								type = euclidean
							}
						}
						solar_system = {
							random_neighbor_system = {
								save_event_target_as = relocation_target
							}
						}	
						set_location = event_target:relocation_target.star
						}
					}
				}
			#}
		}
	}

	